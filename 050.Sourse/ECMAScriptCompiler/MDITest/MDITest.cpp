
// MDITest.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "afxwinappex.h"
#include "afxdialogex.h"
#include "MDITest.h"
#include "MainFrm.h"

#include "ChildFrm.h"
#include "MDITestDoc.h"
#include "MDITestView.h"

#include "ChildGetPostFrame.h"
#include "MDITestGetPostDoc.h"
#include "MDITestGetPostView.h"
#include "MDITestGetPostHtmlView.h"
#include <AFXPRIV.H>


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMDITestApp

BEGIN_MESSAGE_MAP(CMDITestApp, CWinApp)
	ON_COMMAND(ID_APP_ABOUT, &CMDITestApp::OnAppAbout)
	// 基于文件的标准文档命令
	ON_COMMAND(ID_FILE_NEW, &CWinApp::OnFileNew)
	ON_COMMAND(ID_FILE_OPEN, &CWinApp::OnFileOpen)
	// 标准打印设置命令
	ON_COMMAND(ID_FILE_PRINT_SETUP, &CWinApp::OnFilePrintSetup)
END_MESSAGE_MAP()


// CMDITestApp 构造

CMDITestApp::CMDITestApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS;
#ifdef _MANAGED
	// 如果应用程序是利用公共语言运行时支持(/clr)构建的，则:
	//     1) 必须有此附加设置，“重新启动管理器”支持才能正常工作。
	//     2) 在您的项目中，您必须按照生成顺序向 System.Windows.Forms 添加引用。
	System::Windows::Forms::Application::SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode::ThrowException);
#endif

	// TODO: 将以下应用程序 ID 字符串替换为唯一的 ID 字符串；建议的字符串格式
	//为 CompanyName.ProductName.SubProduct.VersionInformation
	SetAppID(_T("MDITest.AppID.NoVersion"));

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}

// 唯一的一个 CMDITestApp 对象

CMDITestApp theApp;


// CMDITestApp 初始化

BOOL CMDITestApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	if (!AfxSocketInit())
	{
		AfxMessageBox(IDP_SOCKETS_INIT_FAILED);
		return FALSE;
	}

	// 初始化 OLE 库
	if (!AfxOleInit())
	{
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}

	AfxEnableControlContainer();

	EnableTaskbarInteraction(FALSE);

	// 使用 RichEdit 控件需要  AfxInitRichEdit2()	
	// AfxInitRichEdit2();

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	LoadStdProfileSettings(4);  // 加载标准 INI 文件选项(包括 MRU)


	// 注册应用程序的文档模板。文档模板
	// 将用作文档、框架窗口和视图之间的连接
	CMultiDocTemplate* pDocTemplate;
	pDocTemplate = new CMultiDocTemplate(IDR_MDITestTYPE,
		RUNTIME_CLASS(CMDITestDoc),
		RUNTIME_CLASS(CChildFrame), // 自定义 MDI 子框架
		RUNTIME_CLASS(CMDITestView));
	if (!pDocTemplate)
		return FALSE;
	AddDocTemplate(pDocTemplate);

	//Added by yuanaiqing
	CMultiDocTemplate* pDocTemplate2;
	pDocTemplate2 = new CMultiDocTemplate(IDR_MDITestGetPostTYPE,
		RUNTIME_CLASS(CMDITestGetPostDoc),
		RUNTIME_CLASS(CChildGetPostFrame), // 自定义 MDI 子框架
		RUNTIME_CLASS(CMDITestGetPostView));
	if (!pDocTemplate2)
		return FALSE;
	AddDocTemplate(pDocTemplate2);

	// 创建主 MDI 框架窗口
	CMainFrame* pMainFrame = new CMainFrame;
	if (!pMainFrame || !pMainFrame->LoadFrame(IDR_MAINFRAME))
	{
		delete pMainFrame;
		return FALSE;
	}
	m_pMainWnd = pMainFrame;
	// 仅当具有后缀时才调用 DragAcceptFiles
	// 在 MDI 应用程序中，这应在设置 m_pMainWnd 之后立即发生
	// 启用拖/放
	m_pMainWnd->DragAcceptFiles();

	// 分析标准 shell 命令、DDE、打开文件操作的命令行
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);

	// 启用“DDE 执行”
	EnableShellOpen();
	RegisterShellFileTypes(TRUE);


	// 调度在命令行中指定的命令。如果
	// 用 /RegServer、/Register、/Unregserver 或 /Unregister 启动应用程序，则返回 FALSE。
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;
	// 主窗口已初始化，因此显示它并对其进行更新
	pMainFrame->ShowWindow(SW_SHOWMAXIMIZED);
	pMainFrame->UpdateWindow();

	// Initiate another CHtmlView
	//CView* pActiveView = ((CFrameWnd*)m_pMainWnd)->GetActiveView();//for SDI
	CView* pActiveView = pMainFrame->MDIGetActive()->GetActiveView();//for MDI
	
	m_pOldView = pActiveView;
	m_pNewView = (CView*)(new CMDITestGetPostHtmlView());
	if (NULL == m_pNewView)
	{
		return FALSE;
	}
	//CDocument* pCurrentDoc = ((CFrameWnd*)m_pMainWnd)->GetActiveDocument();//for SDI
	CDocument* pCurrentDoc = pMainFrame->MDIGetActive()->GetActiveDocument();//for MDI
	CCreateContext newContext;
	newContext.m_pNewViewClass = NULL;
	newContext.m_pNewDocTemplate = NULL;
	newContext.m_pLastView = NULL;
	newContext.m_pCurrentFrame = NULL;
	newContext.m_pCurrentDoc = pCurrentDoc;
	//The ID of the initial active view is AFX_IDW_PANE_FIRST
	//Increamenting this value by one for additional views works
	//in the standard document/view case but the technique cannot 
	//be extended for the CSplitterWnd
	UINT viewID = AFX_IDW_PANE_FIRST + 1;
	CRect rect(0, 0, 0, 0);
	//m_pNewView->Create(NULL, _T("HTML VIEW"), WS_CHILD, rect, m_pMainWnd, viewID, &newContext);//for SDI
	m_pNewView->Create(NULL, _T("HTML VIEW"), WS_CHILD, rect, pMainFrame->MDIGetActive(), viewID, &newContext);//for MDI
	m_pNewView->SendMessage(WM_INITIALUPDATE, 0, 0);


	return TRUE;
}

int CMDITestApp::ExitInstance()
{
	//TODO: 处理可能已添加的附加资源
	AfxOleTerm(FALSE);

	return CWinApp::ExitInstance();
}

// CMDITestApp 消息处理程序


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// 用于运行对话框的应用程序命令
void CMDITestApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}

// CMDITestApp 消息处理程序

CView* CMDITestApp::SwitchView()
{
	CView* pActiveView = ((CMainFrame*)m_pMainWnd)->MDIGetActive()->GetActiveView();

	CView* pNewView = NULL;
	if (pActiveView == m_pOldView)
	{
		pNewView = m_pNewView;
	}
	else
	{
		pNewView = m_pOldView;
	}
	
	//Exchange view window IDs so RecalLayout() works
#ifndef _WIN32
	UINT temp  = ::GetWindowWord(pActiveView->m_hWnd, GWW_ID);
	::SetWindowWord(pNewView->m_hWnd, GWL_ID, temp);
#else
	UINT temp  = ::GetWindowLong(pActiveView->m_hWnd, GWL_ID);
	::SetWindowLong(pActiveView->m_hWnd, GWL_ID, ::GetWindowLong(pNewView->m_hWnd, GWL_ID));
	::SetWindowLong(pNewView->m_hWnd, GWL_ID, temp);
#endif

	pActiveView->ShowWindow(SW_HIDE);
	pNewView->ShowWindow(SW_SHOW);
	//((CFrameWnd*)m_pMainWnd)->SetActiveView(pNewView);
	((CMainFrame*)m_pMainWnd)->MDIGetActive()->SetActiveView(pNewView);
	//((CFrameWnd*)m_pMainWnd)->RecalcLayout();
	((CMainFrame*)m_pMainWnd)->MDIGetActive()->RecalcLayout();
	pNewView->Invalidate();

	return pNewView;
}
CView* CMDITestApp::GetOldView() const
{
	return m_pOldView;
}
void CMDITestApp::SetOldView(CView* val)
{
	m_pOldView = val;
}
CView* CMDITestApp::GetNewView() const
{
	return m_pNewView;
}
void CMDITestApp::SetNewView(CView* val)
{
	m_pNewView = val;
}

